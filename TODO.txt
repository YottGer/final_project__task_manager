CLIENT:
- Error catching.
- Specifically, handle the following error:

A non-serializable value was detected in an action, in the path: `register`. Value: Æ’ register(key) {
    _pStore.dispatch({
      type: _constants__WEBPACK_IMPORTED_MODULE_0__.REGISTER,
      key: key
    });
  } 
Take a look at the logic that dispatched this action:  Object 
(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants) 
(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)

I don't understand this error, and it doesn't seem to affect the app.

SERVER:
- Should I use a refresh token, or is my current method correct?
- Error catching.

DB:
- Read about the array (for example text[]) type in postgreSQL and check wether it is easy to access its values
  in native SQL. if not, don't use it, and instead implement a linking table.
- Make sure no repeated strings are stored in the DB. Both the tags and the status (project status or task status)
  are repeated strings stored in the DB. It is better to implement a linking table (create a tagId <-> tagText table
  and save only the tagIds in the task record).
- Find out where to place dbClient.end() command.

Other:
- Manage packages and sort imports by the order of usage.
- send/store hashed passwords (for security).
- Manage interfaces at the entire project level.